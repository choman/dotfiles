###########################################################################
#                             Global Settings                             #
###########################################################################
set -ga terminal-overrides ',xterm*:smcup@:rmcup@'

# remap prefix to CTRL + a
##set -g prefix C-a
##unbind C-b 
##bind C-a send-prefix

set -g default-terminal "screen-256color"


# in copy mode, use vi bindings and make the mouse work
setw -g mode-keys vi
set -g mouse on

# Maybe better than above???
##is_pre_21="[[ $(tmux -V | cut -d' ' -f2) < 2.1 ]] && echo true || echo false"
##if-shell "$is_pre_21" "setw -g mode-mouse on; set -g mouse-resize-pane on;\
##      set -g mouse-select-pane on; set -g mouse-select-window on" "set -g mouse on"

##is_post21="[[ $(tmux -V | cut -d' ' -f2) >= 2.1 ]] && echo true || echo false"
##if-shell "$is_post21" "set -g mouse on"

##bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'select-pane -t=; copy-mode -e; send-keys -M'"
##bind -n WheelDownPane select-pane -t= \; send-keys -M
##bind -n C-WheelUpPane select-pane -t= \; copy-mode -e \; send-keys -M
##bind -T copy-mode-vi    C-WheelUpPane   send-keys -X halfpage-up
##bind -T copy-mode-vi    C-WheelDownPane send-keys -X halfpage-down
##bind -T copy-mode-emacs C-WheelUpPane   send-keys -X halfpage-up
##bind -T copy-mode-emacs C-WheelDownPane send-keys -X halfpage-down

# To copy, left click and drag to highlight text in yellow, 
# once you release left click yellow text will disappear and will automatically be available in clibboard
# # Use vim keybindings in copy mode
##setw -g mode-keys vi
# Update default binding of `Enter` to also use copy-pipe
##unbind -T copy-mode-vi Enter
##bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "xclip -selection c"
##bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "xclip -in -selection clipboard"

# Double LMB Select & Copy (Word)
bind-key -T copy-mode DoubleClick1Pane \
    select-pane \; \
    send-keys -X select-word-no-clear \; \
    send-keys -X copy-pipe-no-clear "xclip -in -sel primary"
bind-key -n DoubleClick1Pane \
    select-pane \; \
    copy-mode -M \; \
    send-keys -X select-word \; \
    send-keys -X copy-pipe-no-clear "xclip -in -sel primary"

# Triple LMB Select & Copy (Line)
bind-key -T copy-mode TripleClick1Pane \
    select-pane \; \
    send-keys -X select-line \; \
    send-keys -X copy-pipe-no-clear "xclip -in -sel primary"
bind-key -n TripleClick1Pane \
    select-pane \; \
    copy-mode -M \; \
    send-keys -X select-line \; \
    send-keys -X copy-pipe-no-clear "xclip -in -sel primary"

## 2.1 mouse intrergration
## set -g mode-mouse on
## set -g mouse-select-pane off
## set -g mouse-resize-pane off
## set -g mouse-select-window off

# scrollback buffer n lines
set -g history-limit 12000

bind C-s run "tmux capture-pane && tmux save-buffer ~/buffer.txt"

# purdy status bar -- see FORMATS section of the man page
set -g status-bg colour236
set -g status-fg white
set -g status-left "#[fg=green][#[fg=cyan]#S#[fg=green]]#[fg=colour250] %a %b %d %H:%M#[default]"
set -g status-left-length 35
set -g status-justify centre
setw -g window-status-current-format '#[fg=black,bg=yellow] #I #[fg=white,bg=colour98] #W #F '
setw -g window-status-current-style 'bg=colour98 bold'
set -g status-right "#[fg=colour250]#H #[fg=cyan](#{weather})[#(uptime|cut -d ' ' -f 12-)]#[default]"

# try to set wm window titles, with xterm escape sequences
set -g set-titles on

# Zero-based indexing for windows and panes isn't terribly sensible.
set -g base-index 1
setw -g pane-base-index 1

# the panes display and status messages don't show very long by default
set -g display-panes-time 2000
set -g display-time 2000

# If we want Vim to be told about focus: http://git.io/2UqSgQ
set -g focus-events on

# In case https://direnv.net is loaded when invoking tmux, unload it so the
# active environment doesn't pollute tmux's
set -g update-environment "DIRENV_DIFF DIRENV_DIR DIRENV_LAYOUT DIRENV_WATCHES"
setenv -gu DIRENV_DIFF ; setenv -gu DIRENV_DIR ; setenv -gu DIRENV_LAYOUT
setenv -gu DIRENV_WATCHES

###########################################################################
#                    Key Bindings - Screen and Vim-ish                    #
###########################################################################
# I'm leaving some unbinds for defaults commented out, as I attempt to
# train myself on some tmux defaults that I like better than screen's

# force a reload of the config file
unbind r
bind r source-file ~/.tmux.conf \; display "tmux config reloaded"

# vim-ish movement between and resizing of panes
bind-key -r C-h select-pane -L
bind-key -r C-j select-pane -D
bind-key -r C-k select-pane -U
bind-key -r C-l select-pane -R
bind-key -r < resize-pane -L 3
bind-key -r > resize-pane -R 3
bind-key -r J swap-pane -D
bind-key -r K swap-pane -U

##bind-key -r K resize-pane -U
##bind-key -r J resize-pane -D
##bind-key -r H resize-pane -L
##bind-key -r L resize-pane -R

bind-key -r M-, swap-window -t -1
bind-key -r M-. swap-window -t +1

# remap kill window, add confirm map before killing server
unbind &
bind-key Q confirm kill-window
bind-key X confirm kill-server

# quick pane cycling
unbind ^A
bind ^A select-pane -t :.+


# mnemonic split bindings
bind | split-window -h
bind - split-window -v


#setw -g monitor-activity on
set -g visual-activity on

# Monitoring toggles
bind-key m setw monitor-activity \; display-message 'monitoring window activity [#{?monitor-activity,ON,OFF}]'
bind-key M if -F '#{monitor-silence}' \
    'setw monitor-silence 0 ; display-message "monitoring window silence [OFF]"' \
    'command-prompt -p "monitor silence: interval (s)" "setw monitor-silence %%"'

# name window
unbind ,
bind-key A command-prompt -I "#W" "rename-window %%"

# Session switching. "H" for "home", comma will accept a prefix string
bind-key H switchc -t main
bind-key , command-prompt -p "switch to session:" "switch-client -t '%%'"
bind-key C command-prompt -p "create session named:" "new-session -s %%"

# Double LMB Select & Copy (Word)
##bind-key -n DoubleClick1Pane \
##    select-pane \; \
##    copy-mode -M \; \
##    send-keys -X select-word \;
##    run-shell "sleep .5s" \; \
##    send-keys -X copy-pipe-and-cancel "pbcopy"

##bind-key -n DoubleClick1Pane \
##    select-pane \; \
##    copy-mode -M \; \
##    send-keys -X select-word \;
#    run-shell "sleep .5s" \;
#    send-keys -X copy-pipe-and-cancel "pbcopy

# Make copy mode more vim-like.
bind-key -Tcopy-mode-vi v send -X begin-selection
bind-key -Tcopy-mode-vi y send -X copy-selection
bind-key -Tcopy-mode-vi C-v send -X rectangle-toggle

# Load a named session
# Without completion mechanisms for tmux commands, I can't think of anything
# easier than naming conventions to do this for now. Probably some worthy ideas
# in: https://github.com/tmux-plugins/tmux-sessionist
bind-key S command-prompt -p "load saved session named:" \
    'if "tmux has-session -t %%" \
        "display-message \"a session named %1 already exists!\"" \
        "source-file ~/.tmux/sessions/%1.conf ; switchc -t %1"'

# Interactively select session file to load. Mnemonic: Browse
# TODO: need a way to switch to detached sessions when launched
bind-key B if -F '#{@has-fpp}' \
    "new-window -n session-select \
        'sh -c \"find ~/.tmux/sessions | fpp --non-interactive -c tmux\ source-file\"'" \
    'display-message "fpp not installed!"'

# I like to quickly pop open a short shell from fullscreen apps like vim, IRC
# TODO: prevent creating a second lower split in the case that one is open
bind-key _ if -F '#{window_zoomed_flag}' \
    'resize-pane -Z ; select-pane -t:.+1' \
    'split-window -l 10'

# "hide", return to last pane and zoom it. Compliments the above _
bind-key h select-pane -l \; resize-pane -Z

# whizbang custom keybindings
bind-key F1 command-prompt -p "Man:" "split-window -h 'exec man %%'"
bind-key @ command-prompt -p "SSH:" "new-window -n %1 'ssh %1'"
bind-key / copy-mode \; send-keys ?

# Toggle piping output from a pane to file
# Can't see a simple way to indicate activated or deactivated :-/
# For external scripts see https://github.com/tmux-plugins/tmux-logging
bind-key P pipe-pane -o 'cat >> ~/.tmux/logs/#S-#W-#T.out' \;\
    display-message "toggled logging of pane to ~/.tmux/logs/#S-#W-#T.out"

# present a menu of URLs to open from the visible pane. sweet.
bind-key U capture-pane \;\
    save-buffer /tmp/tmux-buffer \;\
    delete-buffer \;\
    split-window -l 10 "urlview /tmp/tmux-buffer"

# shortcut to seed fpp file selector with pane contents.
# idea courtesy of https://github.com/tmux-plugins/tmux-fpp
bind-key F capture-pane -J \;\
    save-buffer /tmp/tmux-buffer \;\
    delete-buffer \;\
    new-window -n fpp -c '#{pane_current_path}' "sh -c 'cat /tmp/tmux-buffer | fpp ; rm /tmp/tmux-buffer'"

# This ugliness makes mouse scrolling a pane "Just Work" the way it did before
# tmux 2.1. This will probably be a default mapping in the next version:
# https://github.com/tmux/tmux/issues/145
# Change the end to `'copy-mode -e; send-keys -M'` to start scroll immediately
##bind -n WheelUpPane select-pane -t = \;\
##    if -t = -F "#{mouse_any_flag}" "send-keys -M" \
##        "if -t = -F '#{pane_in_mode}' 'send-keys -M' 'copy-mode -e'"


#######################################################################
#                               Plugins                               #
#######################################################################
# Worth a look for some scrolling improvements:
# https://github.com/NHDaly/tmux-better-mouse-mode

# Other examples:
# set -g @plugin 'github_username/plugin_name'
# set -g @plugin 'git@github.com/user/plugin'
# set -g @plugin 'git@bitbucket.com/user/plugin'



#######################################################################
#                       Plugins Configurations                        #
#######################################################################
set-option -g @tmux-weather-units "u" 


set -g @continuum-save-interval '30'
set -g @resurrect-capture-pane-contents 'on'

#set -g status-right '#{cpu_bg_color} CPU: #{cpu_icon} #{cpu_percentage} | %a %h-%d %H:%M '


# Other examples:
# set -g @plugin 'github_username/plugin_name'
# set -g @plugin 'git@github.com/user/plugin'
# set -g @plugin 'git@bitbucket.com/user/plugin'

run-shell ~/.config/tmux/plugins/tmux-continuum/continuum.tmux
run-shell ~/.config/tmux/plugins/tmux-resurrect/resurrect.tmux
run-shell ~/.config/tmux/plugins/tmux-weather/tmux-weather.tmux
run-shell ~/.config/tmux/plugins/tmux-cpu/cpu.tmux

#######################################################################
#                       Session Initialization                        #
#######################################################################

# need a default session despite the conditionals below
new-session -d -s default

# Default session setups for certain hosts - YADM to the rescue
##if '[ `hostname -s` = lupin ] && ! tmux has-session -t main' \
##    'source-file $HOME/.tmux/lupin.conf'
##if '[ `hostname -s` = kodama ] && ! tmux has-session -t main' \
##    'source-file $HOME/.tmux/kodama.conf'
##if '[ `hostname -s` = Fio ] && ! tmux has-session -t main' \
##    'source-file $HOME/.tmux/fio.conf'

# If we started one of the preconfigured sessions, use it and kill the default
if 'tmux has-session -t main && tmux has-session -t default' \
    'switch-client -t main; kill-session -t default'

#######################################################################
#                       Plugins                                       #
#######################################################################
# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @plugin 'tmux-plugins/tmux-logging'
set -g @plugin 'tmux-plugins/tmux-copycat'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'tmux-plugins/tmux-cpu'
set -g @plugin 'xamut/tmux-weather'

# Be nice....
#bind-key M-L run "ls ~/.tmux/plugins" # set monitor-activity \; display-message 'monitoring window activity [#{?monitor-activity,ON,OFF}]'

if "test ! -d ~/.tmux/plugins/tpm" \
   "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm && ~/.tmux/plugins/tpm/bin/install_plugins'"

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run -b '~/.config/tmux/plugins/tpm/tpm'
