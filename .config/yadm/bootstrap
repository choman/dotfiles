#!/usr/bin/env bash

# Variables
AM_VM=false
ARIA2C_EXTRA_FLAGS="--allow-overwrite=true --auto-file-renaming=false"
BASH_COMPLETION_HOME="${HOME}/.config/bash_completion.d"
BIN_DIR="${HOME}/bin"
LOCAL_BIN_DIR="${HOME}/.local/bin"
DEBUG=true
DISTRO="ubuntu"

# Variables Arrays
DIRS=(
   "$HOME/.bash_completion.d"
   ${BASH_COMPLETION_HOME}
   ${LOCAL_BIN_DIR}
   "$HOME/.config/bin"
   "$HOME/.local/share/bin"
   "$BIN_DIR"
)

check_vm()
{
   echo "Checking if I am a VM - via systemd-detect-virt"
   if systemd-detect-virt -q; then
      AM_VM=true
   fi
}

function get_yadm_version
{
   yadm_version=$(yadm version | grep "yadm version" | awk '{print $3}') 
}

function get_bash_version
{
   bash_version=$(yadm version | grep "bash version" | awk '{print $3}')
}

function determine_download_command
{
   declare -A DCS
   DCS['aria2c']="-x 8"
   DCS['wget']=""

   echo "Determinnig download command"
   for dc in ${!DCS[@]};
   do
      if $DEBUG; then
          echo "  - checking $dc"
      fi
      which $dc > /dev/null 
      if [[ $? -eq 0 ]]; then
         DOWNLOAD="$dc ${DCS[$dc]}"
         break 
      fi
   done
}

# need soething better
function determine_distro
{
  if [[ -f "/etc/os-release" ]]
  then
    source /etc/os-release
    DISTRO=$ID
    echo "\${DISTRO} = ${DISTRO}"
  else
    UNAME=$(uname | tr "[A-Z]" "[a-z]")
    # If Linux, try to determine specific distribution
    if [[ "$UNAME" == "linux" ]]; then
        # If available, use LSB to identify distribution
##        if [[ -f "/etc/lsb-release" -o -d "/etc/lsb-release.d" ]]; then
##            export DISTRO=$(lsb_release -i | cut -d: -f2 | sed s/'^\t'// | tr "[A-Z]" "[a-z]")
##        # Otherwise, use release info file
##        else
            export DISTRO=$(ls -d /etc/[A-Za-z]*[_-][rv]e[lr]* | grep -v "lsb" | cut -d'/' -f3 | cut -d'-' -f1 | cut -d'_' -f1)
##        fi
    fi
  fi

   # For everything else (or if above failed), just use generic identifier
   [ "$DISTRO" == "" ] && export DISTRO=$UNAME
   unset UNAME
   yadm config local.class $DISTRO
}

function setup_home_dir
{
   echo "Setting up home directory"
   for dir in ${DIRS[@]}; do
      echo "  - Checking existence: ${dir}"
      [[ ! -d "${dir}" ]] && mkdir -pv "${dir}"
   done
}

function setup_macfun
{
   echo "Setting up known macs"
   declare -A class

   class["70:85:c2:06:09:a6"]="vboxvdi"
   class["08:00:27:17:b9:94"]="funstuff"
}

function install_yadm_completions
{
  # assuming aria2c - --allow-overwrite=true --auto-file-renaming=false
  $DOWNLOAD ${ARIA2C_EXTRA_FLAGS} -d ${BASH_COMPLETION_HOME} -o yadm \
      https://raw.githubusercontent.com/yadm-dev/yadm/refs/heads/develop/completion/bash/yadm
  source ${BASH_COMPLETION_HOME}/yadm
}

function install_vbox_completions
{
  # assuming aria2c - --allow-overwrite=true --auto-file-renaming=false
  ${DOWNLOAD} ${ARIA2C_EXTRA_FLAGS} -d ${BASH_COMPLETION_HOME} -o vboxmanage \
      https://raw.githubusercontent.com/tfmalt/bash-completion-virtualbox/master/vboxmanage_completion.bash

  source ${BASH_COMPLETION_HOME}/vboxmanage
}

function install_homebrew
{
   sudo apt install -y build-essential procps curl file git
   /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
}

function print_debug01
{
   if $DEBUG; then
      echo "print_debug01"
      echo "  - \$DISTRO        = $DISTRO"
      echo "  - \$DOWNLOAD      = $DOWNLOAD"
      echo "  - \$yadm_version  = $yadm_version"
   fi
}

# Deprecated
##function install_linuxbrew
##{
##   sh -c "$(curl -fsSL https://raw.githubusercontent.com/Linuxbrew/install/master/install.sh)"
##}


check_vm
determine_distro
determine_download_command
get_yadm_version
print_debug01
setup_home_dir
setup_macfun

# Go home
cd "$HOME" || echo "can't go to: $HOME"

setup_macfun

install_yadm_completions
install_vbox_completions
##install_linuxbrew
install_homebrew

# update yadm remote, not sure why I do this
#yadm remote set-url origin https://choman@github.com/choman/dotfiles

# Install/Update yadm submodules
yadm submodule update --init --remote
##(cd bashmarks; make install)


##echo "${!class[@]}"
##echo "${class[@]}"
for mac in $(ip addr show | grep ether | awk '{print $2}')
do
    echo "MAC = ${mac}"
    if [ -n "${class[$mac]}" ]; then  
        #echo "$mac => ${class[$mac]}"
        yadm config local.class ${class[$mac]}
    fi
done

CLASS=$(yadm config local.class)

##echo "Installing teleconsole"
##curl https://www.teleconsole.com/get.sh | sudo sh

###
### Disabled: should also check against rhel based
### Disabled: Don't need anymore???
##if [ $CLASS = "dcw" ]; then
##   cd /tmp
##   wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
##   sudo yum localinstall -y /tmp/epel-release-latest-7.noarch.rpm
##
##   sudo yum install -y tmux meld
##
##   exit
##fi

#config_ubuntu_desktop
# gsettings list-recursively
# update some more system settings
###gsettings set com.canonical.indicator.datetime show-day true
###gsettings set com.canonical.indicator.datetime show-date true
###gsettings set com.canonical.Unity integrated-menus true
###gsettings set org.gnome.desktop.interface locate-pointer true

# gnome 17.10
##gsettings set org.gnome.desktop.interface clock-show-date true


# dconf watch /
##dconf write /org/compiz/profiles/unity-lowgfx/plugins/core/hsize 2
##dconf write /org/compiz/profiles/unity-lowgfx/plugins/core/vsize 2
##dconf write /com/canonical/indicator/keyboard/visible false

# really not a vm then do stuff on physical system
###if ! $AM_VM; then
###   dconf write /org/compiz/profiles/unity-lowgfx/plugins/unityshell/launcher-hide-mode 1
###fi

###dconf write /org/compiz/profiles/unity/plugins/unityshell/icon-size 32
##dconf write /com/canonical/unity/launcher/favorites ['application://org.gnome.Nautilus.desktop', 'application://firefox.desktop', 'application://libreoffice-writer.desktop', 'application://libreoffice-calc.desktop', 'application://libreoffice-impress.desktop', 'application://org.gnome.Software.desktop', 'application://ubuntu-amazon-default.desktop', 'application://unity-control-center.desktop', 'application://virtualbox.desktop', 'unity://running-apps', 'unity://expo-icon', 'unity://devices']

##dconf write /org/compiz/profiles/unity/plugins/core/vsize 1
##dconf write /org/compiz/profiles/unity/plugins/core/hsize 5
##dconf write /org/compiz/profiles/unity/plugins/opengl/texture-filter 2
##dconf write /org/compiz/profiles/unity/plugins/unityshell/alt-tab-bias-viewport false


# AppImages
$DOWNLOAD ${ARIA2C_EXTRA_FLAGS} -d ${LOCAL_BIN_DIR} https://freeter.io/download/Freeter.AppImage
chmod +x ${LOCAL_BIN_DIR}/Freeter.AppImage

