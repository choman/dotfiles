#!/bin/bash

AMIVM=false
DISTRO="ubuntu"
BASH_COMPLETION_HOME="${HOME}/.config/bash_completion.d"
BIN_DIR="${HOME}/bin"

DIRS=(
    "$HOME/.bash_completion.d"
    ${BASH_COMPLETION_HOME}
    "$HOME/.config/bin"
    "$BIN_DIR"
  )

checkvm()
{
    echo "Checking if I am a VM - not virt-what"
    if ! systemd-detect-virt; then
        AMIVM=true
    fi
}

function get_yadm_version
{
    yadm_version=$(yadm version | awk '{print $2}') 
}

function get_bash_version
{
    yadm_version=$(yadm version | awk '{print $2}')
}

function determineDownloadCommand
{
   declare -A DCS
   DCS['aria2c']="-x 8"
   DCS['wget']=""

   for dc in ${!DCS[@]};
   do
      which $dc > /dev/null 
      if [ $? -eq 0 ]; then
         DOWNLOAD="$dc ${DCS[$dc]}"
         break 
      fi
   done
   

}

# need soething better
function determineDistro
{
  if [ -f "/etc/os-release" ]
  then
    DISTRO=$(grep "^ID=" /etc/os-release | awk -F= '{print $2}')
  echo $DISTRO
  else
    UNAME=$(uname | tr "[A-Z]" "[a-z]")
    # If Linux, try to determine specific distribution
    if [ "$UNAME" == "linux" ]; then
        # If available, use LSB to identify distribution
        if [ -f "/etc/lsb-release" -o -d "/etc/lsb-release.d" ]; then
            export DISTRO=$(lsb_release -i | cut -d: -f2 | sed s/'^\t'// | tr "[A-Z]" "[a-z]")
        # Otherwise, use release info file
        else
            export DISTRO=$(ls -d /etc/[A-Za-z]*[_-][rv]e[lr]* | grep -v "lsb" | cut -d'/' -f3 | cut -d'-' -f1 | cut -d'_' -f1)
        fi
    fi
  fi

   # For everything else (or if above failed), just use generic identifier
   [ "$DISTRO" == "" ] && export DISTRO=$UNAME
   unset UNAME
   yadm config local.class $DISTRO
}

function setup_homedir
{
    for dir in ${DIRS[@]}; do
        echo "Checking existence: ${dir}"
        if [ ! -d "${dir}" ]; then
            mkdir -pv ${dir}
        fi
    done
}

function setup_macfun
{
    # setup classes
    declare -A class

    class["70:85:c2:06:09:a6"]="vboxvdi"
    class["08:00:27:17:b9:94"]="funstuff"
}

function install_yadm_completions
{
   

   if [ $? -eq 0 ]; then
      DC="aria2c -x 8"
   else
      DC="wget"
   fi

  $DOWNLOAD -d ${BASH_COMPLETION_HOME} -o  yadm \
           https://raw.githubusercontent.com/TheLocehiliosan/yadm/bash-completion/bash-completion.sh
}

function install_vbox_completions
{
   ${DOWNLOAD} -d ${BASH_COMPLETION_HOME} -o vboxmanage \
       https://raw.githubusercontent.com/tfmalt/bash-completion-virtualbox/master/vboxmanage_completion.bash
}

function install_homebrew
{
   sudo apt install -y build-essential procps curl file git
   /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
}

# Deprecated
##function install_linuxbrew
##{
##   sh -c "$(curl -fsSL https://raw.githubusercontent.com/Linuxbrew/install/master/install.sh)"
##}


checkvm
determineDistro
determineDownloadCommand
get_yadm_version
setup_homedir
setup_macfun

# Go home
cd "$HOME" || echo "can't go to: $HOME"

setup_macfun

install_yadm_completions
install_vbox_completions
##install_linuxbrew
install_homebrew

# update yadm remote, not sure why I do this
#yadm remote set-url origin https://choman@github.com/choman/dotfiles

# Install/Update yadm submodules
yadm submodule update --init --remote
(cd bashmarks; make install)


##echo "${!class[@]}"
##echo "${class[@]}"
for mac in $(ip addr show | grep ether | awk '{print $2}')
do
    echo "MAC = ${mac}"
    if [ -n "${class[$mac]}" ]; then  
        #echo "$mac => ${class[$mac]}"
        yadm config local.class ${class[$mac]}
    fi
done

CLASS=$(yadm config local.class)

echo "Installing teleconsole"
curl https://www.teleconsole.com/get.sh | sudo sh

if [ $CLASS = "dcw" ]; then
   cd /tmp
   wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
   sudo yum localinstall -y /tmp/epel-release-latest-7.noarch.rpm

   sudo yum install -y tmux meld

   exit
fi

#config_ubuntu_desktop
# gsettings list-recursively
# update some more system settings
gsettings set com.canonical.indicator.datetime show-day true
gsettings set com.canonical.indicator.datetime show-date true
gsettings set com.canonical.Unity integrated-menus true
gsettings set org.gnome.desktop.interface locate-pointer true


# gnome 17.10
gsettings set org.gnome.desktop.interface clock-show-date true


# dconf watch /
##dconf write /org/compiz/profiles/unity-lowgfx/plugins/core/hsize 2
##dconf write /org/compiz/profiles/unity-lowgfx/plugins/core/vsize 2
##dconf write /com/canonical/indicator/keyboard/visible false

# really not a vm then do stuff on physical system
###if ! $AMIVM; then
###   dconf write /org/compiz/profiles/unity-lowgfx/plugins/unityshell/launcher-hide-mode 1
###fi

###dconf write /org/compiz/profiles/unity/plugins/unityshell/icon-size 32
##dconf write /com/canonical/unity/launcher/favorites ['application://org.gnome.Nautilus.desktop', 'application://firefox.desktop', 'application://libreoffice-writer.desktop', 'application://libreoffice-calc.desktop', 'application://libreoffice-impress.desktop', 'application://org.gnome.Software.desktop', 'application://ubuntu-amazon-default.desktop', 'application://unity-control-center.desktop', 'application://virtualbox.desktop', 'unity://running-apps', 'unity://expo-icon', 'unity://devices']

##dconf write /org/compiz/profiles/unity/plugins/core/vsize 1
##dconf write /org/compiz/profiles/unity/plugins/core/hsize 5
##dconf write /org/compiz/profiles/unity/plugins/opengl/texture-filter 2
##dconf write /org/compiz/profiles/unity/plugins/unityshell/alt-tab-bias-viewport false


# AppImages
$DOWNLOAD -d ${HOME}/bin https://freeter.io/download/Freeter.AppImage
chmod +x ${BIN_DIR}/Freeter.AppImage

